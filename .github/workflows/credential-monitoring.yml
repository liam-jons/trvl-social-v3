name: Credential Monitoring and Rotation Alerts

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ages
          - usage
          - security

      force_alerts:
        description: 'Send alerts even for non-critical issues'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production

jobs:
  credential-monitoring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure environment
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
        run: |
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" >> .env
          echo "VITE_SUPABASE_PUBLISHABLE_KEY=$VITE_SUPABASE_PUBLISHABLE_KEY" >> .env

      - name: Run credential monitoring
        id: monitoring
        run: |
          CHECK_TYPE="${{ github.event.inputs.check_type || 'run' }}"

          echo "Running credential monitoring: $CHECK_TYPE"

          # Capture monitoring output
          if ! node scripts/credential-monitoring.js $CHECK_TYPE > monitoring_output.txt 2>&1; then
            echo "MONITORING_FAILED=true" >> $GITHUB_OUTPUT
            echo "Monitoring failed. Output:"
            cat monitoring_output.txt
            exit 1
          fi

          # Check for critical alerts in output
          CRITICAL_COUNT=$(grep -c "CRITICAL:" monitoring_output.txt || echo "0")
          WARNING_COUNT=$(grep -c "WARNING:" monitoring_output.txt || echo "0")

          echo "CRITICAL_COUNT=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "WARNING_COUNT=$WARNING_COUNT" >> $GITHUB_OUTPUT
          echo "HAS_ALERTS=$([[ $CRITICAL_COUNT -gt 0 || $WARNING_COUNT -gt 0 ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          # Save output for later steps
          cat monitoring_output.txt

      - name: Generate monitoring report
        id: report
        if: success() || failure()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Create monitoring report
          cat > monitoring_report.md << EOF
          # üîç Credential Monitoring Report

          **Timestamp**: $TIMESTAMP
          **Workflow**: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Triggered by**: ${{ github.event_name }}

          ## Summary
          - **Critical Alerts**: ${{ steps.monitoring.outputs.CRITICAL_COUNT || '0' }}
          - **Warning Alerts**: ${{ steps.monitoring.outputs.WARNING_COUNT || '0' }}
          - **Status**: ${{ steps.monitoring.outputs.MONITORING_FAILED == 'true' && '‚ùå Failed' || '‚úÖ Completed' }}

          ## Monitoring Output
          \`\`\`
          $(cat monitoring_output.txt)
          \`\`\`

          ## Next Actions
          $( [[ "${{ steps.monitoring.outputs.CRITICAL_COUNT }}" -gt 0 ]] && echo "üö® **CRITICAL**: Immediate credential rotation required" || echo "‚úÖ No immediate action required" )

          ## Resources
          - [Credential Management Guide](./CREDENTIAL_SETUP_GUIDE.md)
          - [Rotation Procedures](./docs/API_KEY_ROTATION_PROCEDURES.md)
          - [Emergency Rotation](./scripts/credential-management.js)
          EOF

          echo "REPORT_CREATED=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue for Critical Alerts
        if: steps.monitoring.outputs.CRITICAL_COUNT > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('monitoring_report.md', 'utf8');

            const title = `üö® CRITICAL: Credential Rotation Required (${new Date().toISOString().split('T')[0]})`;

            const body = `${report}

            ## Immediate Actions Required

            1. **Review the monitoring output above**
            2. **Run emergency rotation**: \`node scripts/credential-management.js emergency\`
            3. **Follow rotation procedures**: [API Key Rotation Guide](./docs/API_KEY_ROTATION_PROCEDURES.md)
            4. **Update credentials in Supabase Vault**
            5. **Close this issue once rotation is complete**

            **‚ö†Ô∏è This is an automated alert. Immediate action is required.**

            /cc @security-team`;

            // Check if there's already an open issue for credential rotation
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,credential-rotation'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('CRITICAL: Credential Rotation Required')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Update: ${new Date().toISOString()}\n\n${report}`
              });

              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'credential-rotation', 'critical']
              });

              console.log(`Created issue #${issue.data.number}`);
            }

      - name: Send Slack notification
        if: (steps.monitoring.outputs.HAS_ALERTS == 'true' || github.event.inputs.force_alerts == 'true') && always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.monitoring.outputs.CRITICAL_COUNT > 0 && 'failure' || (steps.monitoring.outputs.WARNING_COUNT > 0 && 'warning' || 'success') }}
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.monitoring.outputs.CRITICAL_COUNT > 0 && 'danger' || (steps.monitoring.outputs.WARNING_COUNT > 0 && 'warning' || 'good') }}",
                  "title": "üîç Credential Monitoring Report",
                  "fields": [
                    {
                      "title": "Critical Alerts",
                      "value": "${{ steps.monitoring.outputs.CRITICAL_COUNT || '0' }}",
                      "short": true
                    },
                    {
                      "title": "Warning Alerts",
                      "value": "${{ steps.monitoring.outputs.WARNING_COUNT || '0' }}",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                      "short": true
                    }
                  ],
                  "footer": "Credential Monitoring System",
                  "ts": "${{ github.event.head_commit.timestamp }}"
                }
              ]
            }

      - name: Upload monitoring artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: credential-monitoring-report-${{ github.run_id }}
          path: |
            monitoring_output.txt
            monitoring_report.md
          retention-days: 30

      - name: Update monitoring status badge
        if: always()
        run: |
          # Create status badge data
          STATUS="${{ steps.monitoring.outputs.MONITORING_FAILED == 'true' && 'failed' || 'passing' }}"
          COLOR="${{ steps.monitoring.outputs.CRITICAL_COUNT > 0 && 'red' || (steps.monitoring.outputs.WARNING_COUNT > 0 && 'yellow' || 'green') }}"

          # Generate badge JSON
          cat > .github/badges/credential-monitoring.json << EOF
          {
            "schemaVersion": 1,
            "label": "credential monitoring",
            "message": "$STATUS",
            "color": "$COLOR",
            "namedLogo": "security"
          }
          EOF

          echo "Badge updated: $STATUS ($COLOR)"

      - name: Commit badge update
        if: always()
        run: |
          if [[ -f .github/badges/credential-monitoring.json ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            git add .github/badges/credential-monitoring.json

            if ! git diff --staged --quiet; then
              git commit -m "Update credential monitoring badge [skip ci]"
              git push
            fi
          fi

  # Separate job for emergency alerts (runs on high priority)
  emergency-alerts:
    runs-on: ubuntu-latest
    needs: credential-monitoring
    if: needs.credential-monitoring.outputs.CRITICAL_COUNT > 0

    steps:
      - name: Send PagerDuty alert
        if: env.PAGERDUTY_INTEGRATION_KEY != ''
        env:
          PAGERDUTY_INTEGRATION_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H "Content-Type: application/json" \
            -d '{
              "routing_key": "'$PAGERDUTY_INTEGRATION_KEY'",
              "event_action": "trigger",
              "payload": {
                "summary": "Critical credential rotation required - TRVL Social",
                "source": "github-actions",
                "severity": "critical",
                "component": "credential-management",
                "group": "security",
                "class": "credential-rotation"
              }
            }'

      - name: Send emergency email
        if: env.EMERGENCY_EMAIL != ''
        env:
          EMERGENCY_EMAIL: ${{ secrets.EMERGENCY_EMAIL }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        run: |
          curl -X POST https://api.sendgrid.com/v3/mail/send \
            -H "Authorization: Bearer $SENDGRID_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "personalizations": [{
                "to": [{"email": "'$EMERGENCY_EMAIL'"}],
                "subject": "üö® CRITICAL: Credential Rotation Required - TRVL Social"
              }],
              "from": {"email": "security@trvlsocial.com"},
              "content": [{
                "type": "text/html",
                "value": "<h1>Critical Security Alert</h1><p>Credentials require immediate rotation. View the <a href=\"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\">monitoring report</a> for details.</p>"
              }]
            }'

# Add outputs for use in other workflows
outputs:
  critical_count:
    description: "Number of critical credential alerts"
    value: ${{ jobs.credential-monitoring.outputs.CRITICAL_COUNT }}

  warning_count:
    description: "Number of warning alerts"
    value: ${{ jobs.credential-monitoring.outputs.WARNING_COUNT }}

  monitoring_status:
    description: "Overall monitoring status"
    value: ${{ jobs.credential-monitoring.outputs.MONITORING_FAILED == 'true' && 'failed' || 'success' }}